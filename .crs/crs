#!/usr/bin/env bash
set -euo pipefail

function init() {
    # Setup workspace
    catkin init
    catkin config --extend /opt/ros/noetic
    catkin config --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo
    catkin config --merge-devel
    bash .setup/ubuntu/setup_ws.sh
}

function build()
{
    catkin build
}

function run_test()
{
    catkin run_tests --jobs=1
}

function clean()
{
    catkin clean
}

function generate()
{
    crs clean
    src/crs/controls/mpc_solvers/acados/acados_pacejka_mpcc_solver/script/create_solver.sh
    crs build
}

function pwd_is_root() {
    if [[ -d src && -f README.md ]]; then
        true
    else
        false
    fi
}

function usage()
{
    printf "usage: crs <command> [-h]\n"
    printf "\nthere are the following commands:\n\n"
    printf "    build:        Checks if the current directory is the crs root directory. If true,\n"
    printf "                  catkin build is invoked to build the catkin workspace. See\n"
    printf "                  catkin build for further details.\n"
    printf "    clean:        Checks if the current directory is the crs root directory. If true,\n"
    printf "                  the workspace is cleaned similar to catkin clean. See the catkin\n"
    printf "                  documentation for further details.\n"
    printf "    generate:     Generates the c-code for all mpc solvers and rebuilds all packages \n"
    printf "    test:         Checks if the current directory is the crs root directory. If true,\n"
    printf "                  catkin run_tests -j=1 is invoked to build the tests.\n"
    printf "    init:         Checks if the current directory is the crs root directory. If true,\n"
    printf "                  initializes the catkin workspaces using catkin init commands\n"
}

if [[ -z "${1-}" ]]; then
    usage
    exit 0
fi

while [[ -n "${1-}" ]]; do
    if ! $(pwd_is_root); then
        printf "Cannot run crs in this folder! Change to the highest-level CRS folder.\n"
        exit 1
    fi

    case $1 in
        build ) build ;;
        clean ) clean ;;
        generate )  generate ;;
        init ) init;;
        test ) run_test;;
        -h | --help )   
            usage
            exit 0
            ;;
        * )                     
            usage
            exit 1
            ;;
    esac
    shift
done
